{
  "results": [
    {
      "id": 1,
      "name": "Instalacion",
      "detalle": "Instalacion y configuracion",
      "link": [
        {
          "nombre": "link1",
          "archivo": "InstalacionPop.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "InstalacionPop.txt"
        }
      ]
    },
    {
      "id": 2,
      "name": "Tipos de Datos",
      "detalle": "Tipos de Datos Primitivos y operadores matematicos, Logicos",
      "link": [
        {
          "nombre": "link1",
          "archivo": "TiposDatosJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "TiposDatosJava.txt"
        }
      ]
    },
    {
      "id": 3,
      "name": "System.out.println",
      "detalle": "Muestra informacion por consola",
      "link": [
        {
          "nombre": "link1",
          "archivo": "SystemOutPrintln.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "SystemOutPrintln.txt"
        }
      ]
    },
    {
      "id": 4,
      "name": ".equals()",
      "detalle": "Para efectuar una comparación por igual usamos equals",
      "link": [
        {
          "nombre": "link1",
          "archivo": "equals.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "equals.txt"
        }
      ]
    },
    {
      "id": 5,
      "name": ".compareTo()",
      "detalle": "Para comparar si un valor es mayor o menor que otro",
      "link": [
        {
          "nombre": "link1",
          "archivo": "compareTo.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "compareTo.txt"
        }
      ]
    },
    {
      "id": 6,
      "name": "String",
      "detalle": "Las Strings nos permiten utilizar funciones ya programadas",
      "link": [
        {
          "nombre": "link1",
          "archivo": "String.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "String.txt"
        }
      ]
    },
    {
      "id": 7,
      "name": "Integer",
      "detalle": "Clase Integer permite almacenar datos numericos enteros y tiene sus propios metodos",
      "link": [
        {
          "nombre": "link1",
          "archivo": "Integer.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "Integer.txt"
        }
      ]
    },
    {
      "id": 8,
      "name": "Float",
      "detalle": "Clase Float permite almacenar datos con decimales o punto flotante y tiene sus propios metodos",
      "link": [
        {
          "nombre": "link1",
          "archivo": "Float.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "Float.txt"
        }
      ]
    },
    {
      "id": 9,
      "name": "Date",
      "detalle": "Clase Date permite almacenar datos tipo fecha y tiene sus propios metodos",
      "link": [
        {
          "nombre": "link1",
          "archivo": "Date.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "Date.txt"
        }
      ]
    },
    {
      "id": 10,
      "name": "Scanner",
      "detalle": "Permite ingresar informacion mediante el teclado",
      "link": [
        {
          "nombre": "link1",
          "archivo": "Scanner.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "Scanner.txt"
        }
      ]
    },
    {
      "id": 11,
      "name": "Metodo main y otros metodos",
      "detalle": "El método main en java es un estándar utilizado por la JVM para iniciar la ejecución de cualquier programa Java",
      "link": [
        {
          "nombre": "link1",
          "archivo": "MetodoMain.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "MetodoMain.txt"
        }
      ]
    },
    {
      "id": 12,
      "name": "Programa Numeros Primos",
      "detalle": "Genera los numeros primos al recibir por consola la cantidad que se requiere",
      "link": [
        {
          "nombre": "link1",
          "archivo": "NumerosPrimosJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "NumerosPrimosJava.txt"
        }
      ]
    },
    {
      "id": 13,
      "name": "Array",
      "detalle": "Estructuras de datos estáticas que permiten guardar elementos",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ArrayJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ArrayJava.txt"
        }
      ]
    },
    {
      "id": 14,
      "name": "Objetos",
      "detalle": "OJO",
      "link": [
        {
          "nombre": "link1",
          "archivo": "EncapsulamientoJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "EncapsulamientoJava.txt"
        }
      ]
    },
    {
      "id": 15,
      "name": "Encapsulamiento",
      "detalle": "Limitar el acceso a las variables de nuestras clases Java de tal forma que podamos tener un mayor control sobre ellas",
      "link": [
        {
          "nombre": "link1",
          "archivo": "EncapsulamientoJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "EncapsulamientoJava.txt"
        }
      ]
    },
    {
      "id": 16,
      "name": "UML",
      "detalle": "Lenguaje de modelado unificado (Unified Modeling Language)",
      "link": [
        {
          "nombre": "link1",
          "archivo": "UMLJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "UMLJava.txt"
        }
      ]
    },
    {
      "id": 17,
      "name": "Herencia en Java",
      "detalle": "Heredar la informacion de la clase padre",
      "link": [
        {
          "nombre": "link1",
          "archivo": "HerenciaJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "HerenciaJava.txt"
        }
      ]
    },
    {
      "id": 18,
      "name": "Creacion de una instancia",
      "detalle": "Creacion y UML de una clase instanciada",
      "link": [
        {
          "nombre": "link1",
          "archivo": "CreacionInstancia.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "CreacionInstancia.txt"
        }
      ]
    },
    {
      "id": 19,
      "name": "Interface",
      "detalle": "Una interfaz ( interface ) es sintácticamente similar a una clase abstracta, en la que puede especificar uno o más métodos que no tienen cuerpo ({}). Esos métodos deben ser implementados por una clase para que se definan sus acciones.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "InterfaceJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "InterfaceJava.txt"
        },
        {
          "nombre": "link3",
          "archivo": "InterfaceJava.pdf"
        }
      ]
    },
    {
      "id": 20,
      "name": "Sobre Carga",
      "detalle": "Duplicar un metodo con el mismo nombre y distinto comportamiento",
      "link": [
        {
          "nombre": "link1",
          "archivo": "SobreCarga.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "SobreCarga.txt"
        }
      ]
    },
    {
      "id": 21,
      "name": "Sobre Escritura",
      "detalle": "Utiliza el metodo o firma de una interface o clase abstract y lo sobreEscribe",
      "link": [
        {
          "nombre": "link1",
          "archivo": "SobreEscritura.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "SobreEscritura.txt"
        }
      ]
    },
    {
      "id": 22,
      "name": "Variables de Clase",
      "detalle": "Variables de Clase",
      "link": [
        {
          "nombre": "link1",
          "archivo": "VariablesClase.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "VariablesClase.txt"
        }
      ]
    },
    {
      "id": 23,
      "name": "Metodos de Clase",
      "detalle": "Metodos de Clase",
      "link": [
        {
          "nombre": "link1",
          "archivo": "MetodosClase.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "MetodosClase.txt"
        }
      ]
    },
    {
      "id": 24,
      "name": "Detalles POP",
      "detalle": "Tetalles para tener en cuenta",
      "link": [
        {
          "nombre": "link1",
          "archivo": "detallesPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "detallesPOP.txt"
        }
      ]
    },
    {
      "id": 25,
      "name": "Tabla de Conceptos",
      "detalle": "Detalles para tener en cuenta sobre UML",
      "link": [
        {
          "nombre": "link1",
          "archivo": "TablaConceptosPOPMica.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "TablaConceptosPOPMica.txt"
        }
      ]
    },
    {
      "id": 26,
      "name": ".toString()",
      "detalle": "toString()método devuelve una cadena que representa el objeto",
      "link": [
        {
          "nombre": "link1",
          "archivo": "toString.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "toString.txt"
        }
      ]
    },
    {
      "id": 27,
      "name": ".hashCode()",
      "detalle": "Devuelve un numero unico que identifica al objeto",
      "link": [
        {
          "nombre": "link1",
          "archivo": "hashCode.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "hashCode.txt"
        }
      ]
    },
    {
      "id": 28,
      "name": ".equals(Object o)",
      "detalle": "Método se usa para probar la igualdad entre los tipos de referencia (objetos) en Java",
      "link": [
        {
          "nombre": "link1",
          "archivo": "equalsObject.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "equalsObject.txt"
        }
      ]
    },
    {
      "id": 29,
      "name": "Casting",
      "detalle": "Transforma el objeto de un tipo a otro",
      "link": [
        {
          "nombre": "link1",
          "archivo": "Casting.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "Casting.txt"
        }
      ]
    },
    {
      "id": 30,
      "name": "Colecciones",
      "detalle": "Grupo de objetos(Elementos) que se almacenan y contiene metodos",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ColeccionesPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ColeccionesPOP.txt"
        }
      ]
    },
    {
      "id": 31,
      "name": "Recorrer Colecciones con FOR y WHILE",
      "detalle": "Maneras de recorrer una colección.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "RecorrerColecciones.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "RecorrerColecciones.txt"
        }
      ]
    },
    {
      "id": 32,
      "name": "Iterator",
      "detalle": "Maneras de recorrer una colección.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "Iterator.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "Iterator.txt"
        }
      ]
    },
    {
      "id": 33,
      "name": "for each Java",
      "detalle": "Maneras de recorrer una colección.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "forEachJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "forEachJava.txt"
        }
      ]
    },
    {
      "id": 34,
      "name": "Crear coleccion",
      "detalle": "Crear una collecion en java.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "CrearColeccion.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "CrearColeccion.txt"
        }
      ]
    },
    {
      "id": 35,
      "name": "Agregar Elementos coleccion",
      "detalle": "Adicionar elementos a una collecion en java.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "AgregarElementos.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "AgregarElementos.txt"
        }
      ]
    },
    {
      "id": 36,
      "name": "Eliminar Elementos coleccion",
      "detalle": "Adicionar elementos a una collecion en java.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "EliminarElementosColeccion.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "EliminarElementosColeccion.txt"
        }
      ]
    },
    {
      "id": 37,
      "name": "Obtener o buscar Elementos coleccion",
      "detalle": "Obtener o buscar elementos a una collecion en java.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ObtenerElementosColeccion.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ObtenerElementosColeccion.txt"
        }
      ]
    },
    {
      "id": 38,
      "name": "Generics",
      "detalle": "Programación paramétrica java.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "Generics.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "Generics2.txt"
        },
        {
          "nombre": "link3",
          "archivo": "Generics.txt"
        }
      ]
    },
    {
      "id": 39,
      "name": "Excepciones try catch",
      "detalle": "Cuando en nuestro código se produce un error por una situación excepcional.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ExcepcionesJava.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ExcepcionesJava2.jpg"
        },
        {
          "nombre": "link3",
          "archivo": "ExcepcionesJava.txt"
        }
      ]
    },
    {
      "id": 40,
      "name": "Excepciones RuntimeException",
      "detalle": "Cuando en nuestro código se produce un error por una situación excepcional.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "RuntimeExceptionJava1.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "RuntimeExceptionJava2.jpg"
        },
        {
          "nombre": "link3",
          "archivo": "RuntimeExceptionJava.txt"
        }
      ]
    },
    {
      "id": 41,
      "name": "Excepciones Personalizadas",
      "detalle": "Cuando en nuestro código se produce un error por una situación excepcional.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ExceptionPerJava1.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ExceptionPerJava2.jpg"
        },
        {
          "nombre": "link3",
          "archivo": "ExceptionPerJava.txt"
        }
      ]
    },
    {
      "id": 42,
      "name": "Patrón Singleton",
      "detalle": "Administra su propia instancia y evita que cualquier otra clase cree una instancia de ella.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronSingleton.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronSingleton.txt"
        }
      ]
    },
    {
      "id": 43,
      "name": "Patrón State",
      "detalle": "El patrón de diseño State se utiliza cuando el comportamiento de un objeto cambia dependiendo del estado del mismo",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronState1.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronState2.jpg"
        },
        {
          "nombre": "link3",
          "archivo": "PatronState.txt"
        }
      ]
    },
    {
      "id": 44,
      "name": "Patrón Factory",
      "detalle": "El propósito del patrón Factory es crear objetos, por lo que se considera un patrón de creación",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronFactory1.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronFactory2.jpg"
        },
        {
          "nombre": "link3",
          "archivo": "PatronFactory3.jpg"
        }
      ]
    },
    {
      "id": 45,
      "name": "Patrón Composite",
      "detalle": "El patrón Composite sirve para construir objetos complejos a partir de otros más simples y similares entre sí",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronComposite.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronComposite2.jpg"
        },
        {
          "nombre": "link3",
          "archivo": "PatronComposite.txt"
        }
      ]
    },
    {
      "id": 46,
      "name": "Patrón Observer",
      "detalle": "El patrón Composite sirve para construir objetos complejos a partir de otros más simples y similares entre sí",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronObserver.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronObserver.txt"
        }
      ]
    },
    {
      "id": 47,
      "name": "Patrón Strategy",
      "detalle": "El patrón Strategy sirve para construir objetos complejos a partir de otros más simples y similares entre sí",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronStrategy.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronStrategy.txt"
        }
      ]
    },
    {
      "id": 48,
      "name": "Patrón Cadena de responsabilidad",
      "detalle": "El patrón cadena de responsabilidad permite pasar la responsabilidad a los diferente actores para que el que tenga la posibilidad la resuelva",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronCadenaResponsabilidad.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronCadenaResponsabilidad.txt"
        },
        {
          "nombre": "link3",
          "archivo": "PatronCadenaResponsabilidad.pdf"
        }
      ]
    },
    {
      "id": 49,
      "name": "Patrón Proxy",
      "detalle": "El patrón proxy es un intermediario que agrega funcionalidad a una clase sin modificarla",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronProxy.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronProxy.txt"
        },
        {
          "nombre": "link3",
          "archivo": "PatronProxy.pdf"
        }
      ]
    },
    {
      "id": 50,
      "name": "Patrón Flyweight",
      "detalle": "El patrón proxy es un intermediario que agrega funcionalidad a una clase sin modificarla",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronFlyweight.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronFlyweight.txt"
        },
        {
          "nombre": "link3",
          "archivo": "PatronFlyweight.pdf"
        }
      ]
    },
    {
      "id": 51,
      "name": "Patrón facade",
      "detalle": "El patrón proxy es un intermediario que agrega funcionalidad a una clase sin modificarla",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronFacadePOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronFacadePOP.txt"
        }
      ]
    },
    {
      "id": 52,
      "name": "Instalacion Libreria Log4j (Crear archivo de logs)",
      "detalle": "Permite tener un registro de lo que está pasando en nuestros sistemas, lo que nos posibilita entender mejor los errores.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "InstalacionLibreriaLog4jPOP.pdf"
        },
        {
          "nombre": "link2",
          "archivo": "InstalacionLibreriaLog4jPOP.jpg"
        },
        {
          "nombre": "link3",
          "archivo": "log4j.properties.txt"
        }
      ]
    },
    {
      "id": 53,
      "name": "Libreria Log4j (Crear archivo de logs)",
      "detalle": "Permite tener un registro de lo que está pasando en nuestros sistemas, lo que nos posibilita entender mejor los errores.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "LibreriaLog4jPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "LibreriaLog4jPOP.pdf"
        },
        {
          "nombre": "link3",
          "archivo": "LibreriaLog4jPOP.txt"
        }
      ]
    },
    {
      "id": 54,
      "name": "Patrón Dao (data Access object)",
      "detalle": "El patrón Data Access Object (DAO) pretende principalmente independizar la aplicación de la forma de acceder a la base de datos",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PatronDaoPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PatronDaoPOP.txt"
        }
      ]
    },
    {
      "id": 55,
      "name": "ORM (Conexion Bases de datos)",
      "detalle": "ORM es un mecanismo que permite interactuar con nuestra base de datos sin la necesidad de conocer SQL.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ORMPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ORMPOP.txt"
        }
      ]
    },
    {
      "id": 56,
      "name": "JPA (Java persistence API)",
      "detalle": "Colección de clases y métodos que almacenan de forma persistente grandes cantidades de datos en una BD",
      "link": [
        {
          "nombre": "link1",
          "archivo": "JPAPOP.jpg"
        }
      ]
    },
    {
      "id": 57,
      "name": "Hibernate (framework ORM) Configuracion",
      "detalle": "Hibernate es un framework ORM que ayuda a lograr la persistencia de datos",
      "link": [
        {
          "nombre": "link1",
          "archivo": "HibernatePOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ConfiguracionHibernatePOP.pdf"
        }
      ]
    },
    {
      "id": 58,
      "name": "Hibernate Anotaciones",
      "detalle": "@Entity, @Table, @Id, @GeneratedValue y @Columm",
      "link": [
        {
          "nombre": "link1",
          "archivo": "HibernateAnotacionesPOP.pdf"
        },
        {
          "nombre": "link2",
          "archivo": "HibernateAnotacionesPOP.txt"
        }
      ]
    },
    {
      "id": 59,
      "name": "Hibernate Mapeo de Relaciones",
      "detalle": "Tipos de relaciones y como se representan en Hibernate",
      "link": [
        {
          "nombre": "link1",
          "archivo": "HibernateMapeoRelacionesPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "HibernateMapeoRelacionesPOP.txt"
        }
      ]
    },
    {
      "id": 60,
      "name": "Hibernate JoinColumn, Cascade y Fetch type",
      "detalle": "tipos de anotaciones importantes en Hibernate",
      "link": [
        {
          "nombre": "link1",
          "archivo": "HibernateJoinColumnCascadeFetchPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "HibernateJoinColumnCascadeFetchPOP.txt"
        },
        {
          "nombre": "link3",
          "archivo": "HibernateJoinColumnCascadeFetchPOP.pdf"
        }
      ]
    },
    {
      "id": 61,
      "name": "HQL (Hibernate Query Language)",
      "detalle": "HQL o Hibernate Query Language es un lenguaje de consultas que proporciona Hibernate similar a SQL Standard.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "HQLPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "HQLPOP.txt"
        },
        {
          "nombre": "link3",
          "archivo": "HQLPOP.pdf"
        }
      ]
    },
    {
      "id": 62,
      "name": "Api rest (Anotaciones en el controller)",
      "detalle": "Anotaciones CRUD en el controller @GetMapping, @PathVariable,@Request Param, @PostMapping, @RequestBody, @ResponseBody",
      "link": [
        {
          "nombre": "link1",
          "archivo": "AnotacionesControllerSpringPOP.PDF"
        }
      ]
    },
    {
      "id": 63,
      "name": "Anotaciones en Spring-boot",
      "detalle": "Anotaciones y otras en expring-boot java",
      "link": [
        {
          "nombre": "@value",
          "archivo": "AnotacionesSpringvalueyconfigurationpropierties.jpg"
        },
        {
          "nombre": "Codigo",
          "archivo": "AnotacionesSpringbootVarias.txt"
        }
      ]
    },
    {
      "id": 64,
      "name": "Api rest (ResponseEntity)",
      "detalle": "ResponseEntity Extiende o hereda de la clase HttpEntity y agrega un HttpStatus código de estado. \"cuerpo, cabecera y códigos de estado\"",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ResponseEntitySpringPOP.PDF"
        }
      ]
    },
    {
      "id": 65,
      "name": "Tipos de Relaciones DER",
      "detalle": "Al mapear debemos tener en consideración el tipo de datos y sus relaciones. Por defecto, el nombre del objeto persistido se convierte en el nombre de la tabla y los atributos se convierten en columnas. Una vez que la tabla está creada, cada registro corresponde a un objeto.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "TiposRelacionesDERSpringPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "TiposRelacionesDERSpringPOP.pdf"
        }
      ]
    },
    {
      "id": 66,
      "name": "Patron MVC SpringBoot",
      "detalle": "Modelo-vista-controlador es un patrón de arquitectura de software comúnmente utilizado para desarrollar interfaces de usuario que dividen la lógica del programa relacionado en tres elementos interconectados.",
      "link": [
        {
          "nombre": "Ventajas",
          "archivo": "JavaPatronMVCVentajas.jpg"
        },
        {
          "nombre": "Spring MVC y Spring Boot MVC",
          "archivo": "JavaSpringMVCSpringBootMVC.jpg"
        },
        {
          "nombre": "SpringBootMVC.pdf",
          "archivo": "SpringBootMVC.pdf"
        }
      ]
    },
    {
      "id": 67,
      "name": "Spring-boot JPA Conexion",
      "detalle": "Archivos y confoguracion de conexion a bases de datos con spring-boot Java",
      "link": [
        {
          "nombre": "conexion .yml a Mysql ",
          "archivo": "conexionMysqlYml.yml"
        },
        {
          "nombre": "conexion .yml a MongoDb ",
          "archivo": "conexionMongoYml.yml"
        },
        {
          "nombre": "application.properties Mysql ",
          "archivo": "applicationPropertiesMysql.txt"
        },
        {
          "nombre": "application.properties Mongo ",
          "archivo": "applicationPropertiesMongo.txt"
        }
      ]
    },
    {
      "id": 68,
      "name": "Excepciones con Spring Boot",
      "detalle": "Manejar errores en tiempo de ejecucion",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ExcepcionesSpringBootPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ExcepcionesSpringBootPOP.pdf"
        }
      ]
    },
    {
      "id": 69,
      "name": "Spring Security con Spring Boot",
      "detalle": "Manejo de seguridad, login y autorizaciones",
      "link": [
        {
          "nombre": "link1",
          "archivo": "SpringSecuritySpringBootPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "SpringSecuritySpringBootPOP.pdf"
        }
      ]
    },
    {
      "id": 70,
      "name": "Cookies Spring Boot",
      "detalle": "Manejo de seguridad, login y autorizaciones",
      "link": [
        {
          "nombre": "link1",
          "archivo": "CookiesSpringBootPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "CookiesSpringBootPOP.txt"
        }
      ]
    },
    {
      "id": 71,
      "name": "Autenticación de APIs basada en tokens con Spring y JWT Spring Boot",
      "detalle": "Autenticar una API mediante tokens para poder garantizar que los usuarios que consumen nuestros servicios tienen permiso para hacerlo y son quienes dicen ser",
      "link": [
        {
          "nombre": "link1",
          "archivo": "tokensJWTSpringBootPOP.jpg"
        }
      ]
    },
    {
      "id": 72,
      "name": "Construcción de una API de generación de token",
      "detalle": "Pasos para construir una API de generación de token y como utilizar el token",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ApiGeneracionTokensJWTSpringBootPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ApiGeneracionTokensJWTSpringBootPOP.txt"
        },
        {
          "nombre": "link3",
          "archivo": "ApiGeneracionTokensJWTSpringBootPOP.pdf"
        }
      ]
    },
    {
      "id": 73,
      "name": "Swagger (Documentacion de Apis)",
      "detalle": "Swagger nos ayudará a crear la documentación de nuestras APIs, para que todo el mundo entienda cómo usarla.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "SwaggerpringBootPOP.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "SwaggerpringBootPOP.txt"
        },
        {
          "nombre": "link3",
          "archivo": "SwaggerpringBootPOP.pdf"
        }
      ]
    },
    {
      "id": 74,
      "name": "Trabajo integrador",
      "detalle": "Durante la materia vamos a realizar un trabajo integrador sobre un sistema de reservas en una clínica odontológica",
      "link": [
        {
          "nombre": "link1",
          "archivo": "TrabajoIntegradorBackEnd-I.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "TrabajoIntegradorBackEnd.pdf"
        }
      ]
    },
    {
      "id": 75,
      "name": "¿Qué es back end? ¿Porqué back end?",
      "detalle": "Básicamente, cuando hablamos de 'detrás de escena', es decir, el servidor y la base de datos que ayudan a entregar información del usuario desde una interfaz, hablamos del back end.",
      "link": [
        {
          "nombre": "link1",
          "archivo": "QueEsBackEnd-I.jpg"
        }
      ]
    },
    {
      "id": 76,
      "name": "Instalacion base de datos H2",
      "detalle": "Instalacion de base de datos h2 en windows",
      "link": [
        {
          "nombre": "link1",
          "archivo": "InstalacionBaseDatosH2BackEnd.pdf"
        },
        {
          "nombre": "link2",
          "archivo": "InstalacionBaseDatosH2BackEnd.jpg"
        }
      ]
    },
    {
      "id": 77,
      "name": "Caracteristicas, detalles y JDBC",
      "detalle": "Caracteristicas, detalles y JDBC",
      "link": [
        {
          "nombre": "link1",
          "archivo": "CaracteristicasDetallesJDBCBaseDatosH2BackEnd.jpg"
        }
      ]
    },
    {
      "id": 78,
      "name": "DriverJDBC",
      "detalle": "Uso y funcionamiento de un driver JDBC",
      "link": [
        {
          "nombre": "link1",
          "archivo": "DriverJDBCBaseDatosH2BackEnd.pdf"
        }
      ]
    },
    {
      "id": 79,
      "name": "Conexion a base de datos H2 relacional",
      "detalle": "Instalacion de base de datos h2 en windows",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ConexionBaseDatosH2BackEnd.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ConexionBaseDatosH2BackEnd.txt"
        }
      ]
    },
    {
      "id": 80,
      "name": "Consulta Sencilla base de datos",
      "detalle": "Consulta basica a base de datos h2",
      "link": [
        {
          "nombre": "link1",
          "archivo": "ConsultaSencillaBaseDatosH2BackEnd.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "ConsultaSencillaBaseDatosH2BackEnd.txt"
        }
      ]
    },
    {
      "id": 81,
      "name": "Transaccion",
      "detalle": "Conjunto de operaciones en una base de datos que deben ejecutarse como una unidad. Si una de las operaciones tiene un error obtenemos un rollback() volviendo al estado anterior  ",
      "link": [
        {
          "nombre": "link1",
          "archivo": "TransaccionBaseDatosH2BackEnd.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "TransaccionBaseDatosH2BackEnd.txt"
        },
        {
          "nombre": "link3",
          "archivo": "TransaccionBaseDatosH2BackEnd.pdf"
        }
      ]
    },
    {
      "id": 82,
      "name": "Statement",
      "detalle": "Statement",
      "link": [
        {
          "nombre": "link1",
          "archivo": "StatementBaseDatosH2BackEnd.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "StatementBaseDatosH2BackEnd.txt"
        }
      ]
    },
    {
      "id": 83,
      "name": "PreparedStatement",
      "detalle": "PreparedStatement",
      "link": [
        {
          "nombre": "link1",
          "archivo": "PreparedStatementBaseDatosH2BackEnd.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "PreparedStatementBaseDatosH2BackEnd.txt"
        }
      ]
    },
    {
      "id": 84,
      "name": "stored procedures",
      "detalle": "Procedimiento almacenado en JDBC",
      "link": [
        {
          "nombre": "link1",
          "archivo": "storedProceduresBaseDatosH2BackEnd.jpg"
        },
        {
          "nombre": "link2",
          "archivo": "storedProceduresBaseDatosH2BackEnd.txt"
        },
        {
          "nombre": "link3",
          "archivo": "storedProceduresBaseDatosH2BackEnd.pdf"
        }
      ]
    },
    {
      "id": 85,
      "name": "Especializacion BackEnd",
      "detalle": "Bienvenidos a la Especialización en Back End I",
      "link": [
        {
          "nombre": "Recorrido",
          "archivo": "EJjavaRecorrido.jpg"
        },
        {
          "nombre": "Modulos",
          "archivo": "EJjavaModulos.jpg"
        },
        {
          "nombre": "Programa de la materia",
          "archivo": "EJprogramaMateria.pdf"
        }
      ]
    },
    {
      "id": 86,
      "name": "Principales Patrones de Diseño",
      "detalle": "Principales patrones de diseño y componentes de spring Cloud",
      "link": [
        {
          "nombre": "Patrones de Diseño",
          "archivo": "EJPatronesDiseño.jpg"
        }
      ]
    },
    {
      "id": 87,
      "name": "Arquitectura de software",
      "detalle": "La arquitectura de software establece las bases en términos de estructura",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "JavaArquitecturaSoftware.jpg"
        }
      ]
    },
    {
      "id": 88,
      "name": "Arquitectura monolítica",
      "detalle": "Las aplicaciones monolíticas o sistemas monolíticos, tienen como característica el uso de una base de código única para sus servicios o funcionalidades.",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJArquitecturaMonolitica.jpg"
        }
      ]
    },
    {
      "id": 89,
      "name": "Arquitectura de microservicios",
      "detalle": "Una arquitectura de microservicios consta de una colección de servicios autónomos y pequeños. Cada uno de servicio es independiente y debe implementar una funcionalidad de negocio individual dentro de un contexto delimitado",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJMicroServicios.jpg"
        },
        {
          "nombre": "Link2",
          "archivo": "EJMicroServicios2.jpg"
        }
      ]
    },
    {
      "id": 90,
      "name": "Desafíos de los microservicios y patrones de diseño",
      "detalle": "Detalles a tener en cuenta de los microservicios",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJdesafioMicroservicios.jpg"
        }
      ]
    },
    {
      "id": 91,
      "name": "Service registry y Service discovery",
      "detalle": "El patrón Service registry permite contar con la creación de un servidor centralizado y es complementario al patrón Service discovery",
      "link": [
        {
          "nombre": "Service Registry",
          "archivo": "EJServiceRegistry.jpg"
        },
        {
          "nombre": "Service discovery",
          "archivo": "EJServicediscovery.jpg"
        }
      ]
    },
    {
      "id": 92,
      "name": "Feign (Load balancer)",
      "detalle": "Balanceador de carga para Eureka y comunicación entre microservicios",
      "link": [
        {
          "nombre": "JPG",
          "archivo": "EJLoadBalancerFeign.jpg"
        },
        {
          "nombre": "Invocaciones REST Declarativas",
          "archivo": "EJLoadBalancerInvocacionesRESTDeclarativas.pdf"
        },
        {
          "nombre": "Balanceo de Carga",
          "archivo": "EJBalanceoCargaFeignLoadBalancer.pdf"
        },
        {
          "nombre": "Consigna",
          "archivo": "EJBalanceoCargaConsigna.pdf"
        },
        {
          "nombre": "MicroservicioProveedor JPG",
          "archivo": "EJBalanceoCargaMicroservicioProveedor.jpg"
        },
        {
          "nombre": "Codigo MicroservicioProveedor",
          "archivo": "EJBalanceoCargaMicroservicioProveedor.txt"
        },
        {
          "nombre": "MicroservicioCliente JPG",
          "archivo": "EJBalanceoCargaMicroservicioCliente.jpg"
        },
        {
          "nombre": "Codigo MicroservicioCliente",
          "archivo": "EJBalanceoCargaMicroservicioCliente.txt"
        }
      ]
    },
    {
      "id": 93,
      "name": "Edge Server (API GATEWAY)",
      "detalle": "Muestra algunos microservicios fuera del contexto de nuestro sistema y ocultar otros del acceso externo.",
      "link": [
        {
          "nombre": "JPG",
          "archivo": "EJmicroservicioEdgeServer.jpg"
        },
        {
          "nombre": "PPT",
          "archivo": "EJmicroservicioEdgeServerPPT.pdf"
        },
        {
          "nombre": "Desafio",
          "archivo": "EJmicroservicioEdgeServerDesafio.jpg"
        },
        {
          "nombre": "Consigna AtomicInteger",
          "archivo": "EJmicroservicioEdgeServerconsigna.pdf"
        },
        {
          "nombre": "Codigo",
          "archivo": "EJmicroservicioEdgeServerCodigo.txt"
        },
        {
          "nombre": "Codigo JPG",
          "archivo": "EJmicroservicioEdgeServerCodigoJPG.jpg"
        },
        {
          "nombre": "Load balancer y API Gateway",
          "archivo": "EJmicroservicioEdgeLoadBalancerGateway.jpg"
        },
        {
          "nombre": "Consigna",
          "archivo": "EJmicroservicioEdgeLoadBalancerGateway.pdf"
        }
      ]
    },
    {
      "id": 94,
      "name": "Central configuration ",
      "detalle": "Configuración Server (Almacenamiento centralizado de la configuración de microservicios)",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJConfiguraciónServer.jpg"
        },
        {
          "nombre": "Configuración Server y Cliente",
          "archivo": "EJConfiguraciónServer.pdf"
        },
        {
          "nombre": "ConfigServer",
          "archivo": "EJConfigServidor.jpg"
        },
        {
          "nombre": "Almacen de Configuracion",
          "archivo": "EJServidorCentralizadoConf.jpg"
        },
        {
          "nombre": "Codigo ConfigServer",
          "archivo": "EJEstructuraEntornoMicroserviciosConfigServer.txt"
        }
      ]
    },
    {
      "id": 95,
      "name": "Log aggregation",
      "detalle": "Patrón Log aggregation, el cual mediante un componente externo nos permite concentrar todos los logs en una sola fuente de datos, lo que está sucediendo en cada microservicio.",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJLogAggregation.jpg"
        }
      ]
    },
    {
      "id": 96,
      "name": "Distributed tracing",
      "detalle": "Es un método para rastrear las solicitudes de aplicaciones a medida que fluyen desde los dispositivos frontales hasta los servicios y bases de datos internos.",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJDistributedTracing.jpg"
        }
      ]
    },
    {
      "id": 97,
      "name": "Circuit Breaker",
      "detalle": "El patrón Circuit Breaker impide que un sistema lleve a cabo o continúe haciendo solicitudes a otro cuando existen altas posibilidades de que falle el proceso.",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJCircuitBreaker.jpg"
        }
      ]
    },
    {
      "id": 98,
      "name": "Reactive microservices",
      "detalle": "Por lo tanto, lo que ofrece este patrón es hacer uso de llamadas asíncronas no bloqueantes siempre que sea posible. Cuando hay muchos microservicios corriendo el servidor se tilda o bloquea este patrón ayuda",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJReactiveMicroservices.jpg"
        }
      ]
    },
    {
      "id": 99,
      "name": "Centralized monitoring and alarms",
      "detalle": "Componente: Monitor service (un servicio de monitoreo), que es capaz de recopilar métricas sobre el uso de recursos de hardware para cada nivel de instancia del microservicio.",
      "link": [
        {
          "nombre": "Link1",
          "archivo": "EJCentralizedMonitoringAndAlarms.jpg"
        }
      ]
    },
    {
      "id": 100,
      "name": "Spring Cloud Netflix y Eureka",
      "detalle": "Este componente nos permite crear el servidor de registro mediante el uso de anotaciones. El servicio Eureka nos proporciona además una interfaz gráfica web en la que se nos muestra información de los registros",
      "link": [
        {
          "nombre": "Link",
          "archivo": "EJSpringCloudNetflixEureka.jpg"
        }
      ]
    },
    {
      "id": 101,
      "name": "Eureka server",
      "detalle": "Registro y descubrimiento de microservicios",
      "link": [
        {
          "nombre": "Registro y descubrimiento de microservicios",
          "archivo": "EJRegistroDescubrimientoMicroservicios.jpg"
        },
        {
          "nombre": "Arquitectura Eureka server",
          "archivo": "EJArquitecturaEurekaServer.jpg"
        },
        {
          "nombre": "Spring Boot Actuator",
          "archivo": "EJSpringActuator.jpg"
        },
        {
          "nombre": "Codigo",
          "archivo": "EJEurekaserver.txt"
        },
        {
          "nombre": "PPT Configuracion Eureka",
          "archivo": "EJConfiguracionEureka.pdf"
        },
        {
          "nombre": "EurekaServer",
          "archivo": "EJEurekaServidor.jpg"
        },
        {
          "nombre": "Codigo EurekaServer",
          "archivo": "EJEstructuraEntornoMicroservicios.txt"
        }
      ]
    },
    {
      "id": 102,
      "name": "Estructura Entorno Microservicios",
      "detalle": "Creación Entorno de Microservicios",
      "link": [
        {
          "nombre": "MapaEntorno",
          "archivo": "EJMapaEntorno.jpg"
        },
        {
          "nombre": "EurekaServer",
          "archivo": "EJEurekaServidor.jpg"
        },
        {
          "nombre": "ConfigServer",
          "archivo": "EJConfigServidor.jpg"
        },
        {
          "nombre": "Almacen de Configuracion",
          "archivo": "EJServidorCentralizadoConf.jpg"
        },
        {
          "nombre": "Microservicio",
          "archivo": "EJConfiguracionMicroservicio.jpg"
        },
        {
          "nombre": "Codigo EurekaServer",
          "archivo": "EJEstructuraEntornoMicroservicios.txt"
        },
        {
          "nombre": "Codigo ConfigServer",
          "archivo": "EJEstructuraEntornoMicroserviciosConfigServer.txt"
        },
        {
          "nombre": "Codigo MicroServicio",
          "archivo": "EJEstructuraEntornoMicroserviciosMicroservicio.txt"
        }
      ]
    },
    {
      "id": 103,
      "name": "Variables de Entorno Maven",
      "detalle": "Configuración Variables de Entorno Maven para ejecutar servicios sin intelliJ",
      "link": [
        {
          "nombre": "JPG",
          "archivo": "CorrerMavenDesdeConsola.jpg"
        }
      ]
    },
    {
      "id": 104,
      "name": "API Gateway - Seguridad",
      "detalle": "El gateway actúa como un mecanismo de seguridad que garantiza la protección a través de la autenticación de los usuarios, limitando las conexiones y los permisos de los usuarios.",
      "link": [
        {
          "nombre": "Spring Security - OAuth2",
          "archivo": "APIGatewaySeguridadJava.jpg"
        },
        {
          "nombre": "Spring Security - Implementación OAuth",
          "archivo": "APIGatewaySeguridadJavaImplementaciónOAuth.jpg"
        },
        {
          "nombre": "Cómo implementar OAuth",
          "archivo": "ComoImplementarOAuth.pdf"
        },
        {
          "nombre": "Video",
          "archivo": "GatewayOauth2backendVideo.html"
        }
      ]
    },
    {
      "id": 105,
      "name": "Patron Circuit Breaker",
      "detalle": "Qué es la tolerancia a fallas",
      "link": [
        {
          "nombre": "JPG",
          "archivo": "PatronCircuitBreaker.jpg"
        },
        {
          "nombre": "Los 3 Estados Circuit Breaker",
          "archivo": "EstadosCircuitBreaker.pdf"
        },
        {
          "nombre": "Resilience4J",
          "archivo": "Resilience4JJPG.jpg"
        },
        {
          "nombre": "Implementación de Circuit Breaker",
          "archivo": "ImplementacionCircuitBreaker.pdf"
        },
        {
          "nombre": "Codigo",
          "archivo": "ImplementacionCircuitBreaker.txt"
        },
        {
          "nombre": "JPG Implementación de Circuit Breaker",
          "archivo": "ImplementacionCircuitBreaker.jpg"
        }
      ]
    },
    {
      "id": 106,
      "name": "Distributed tracing",
      "detalle": "Monitorear, Diagnosticar Mitigar y corregir errores haciendo un rastreo para saber en que microservicio ocurrió el error",
      "link": [
        {
          "nombre": "JPG 1",
          "archivo": "EJDistributedTracingJPG.jpg"
        },
        {
          "nombre": "Implementación de Spring Cloud Sleuth",
          "archivo": "EJImplementacionSpringCloudSleuth.pdf"
        },
        {
          "nombre": "JPG Spring Cloud Sleuth",
          "archivo": "EJSpringCloudSleuthJPG.jpg"
        },
        {
          "nombre": "Zipkin",
          "archivo": "EJZipkin.pdf"
        },
        {
          "nombre": "Zipkin docker",
          "archivo": "EJZipkinDocker.txt"
        },
        {
          "nombre": "JPG 2",
          "archivo": "EJDistributedTracingJPG2.jpg"
        }
      ]
    },
    {
      "id": 107,
      "name": "RabbitMQ Comunicación asincrónica",
      "detalle": "Poner mensajes en colas para ser cosumidas cuando haya disponibilidad",
      "link": [
        {
          "nombre": "RabbitMQ JPG",
          "archivo": "EJRabbitMQJPG.jpg"
        },
        {
          "nombre": "PPT RabbitMQ",
          "archivo": "EJRabbitMQPPT.pdf"
        },
        {
          "nombre": "Instalacion RabbitMQ Contenedor Docker",
          "archivo": "EJRabbitMQInstalacionDocker.txt"
        },
        {
          "nombre": "Implementación de Zipkin con RabbitMQ",
          "archivo": "ImplementaciónZipkinRabbitMQ.pdf"
        },
        {
          "nombre": "Codigo",
          "archivo": "EJRabbitMQInstalacionCodigo.txt"
        },
        {
          "nombre": "Consigna",
          "archivo": "EJRabbitMQConsigna.pdf"
        }
      ]
    },
    {
      "id": 108,
      "name": "Log aggregation",
      "detalle": "Este nos permite centralizar la información de los logueos de nuestras aplicaciones para determinar la causa de errores.",
      "link": [
        {
          "nombre": "Introduccion",
          "archivo": "EJLogAggregationIntroducion.jpg"
        },
        {
          "nombre": "Instalación del stack ELK",
          "archivo": "EJLogAggregationstackELK.pdf"
        },
        {
          "nombre": "JPG Implementación del stack ELK",
          "archivo": "JPGImplementaciónStackELK.jpg"
        },
        {
          "nombre": "PPT Implementación del stack ELK",
          "archivo": "PPTImplementaciónStackELK.pdf"
        },
        {
          "nombre": "Conclusión",
          "archivo": "JPGImplementaciónStackELKConclucion.jpg"
        },
        {
          "nombre": "Codigos y Link",
          "archivo": "ImplementaciónStackELKCodigo.txt"
        }
      ]
    },
    {
      "id": 109,
      "name": "Docker y microservicios - Parte I",
      "detalle": "Docker y microservicios",
      "link": [
        {
          "nombre": "Introduccion",
          "archivo": "EJDockerMicroserviciosIntroduccion.jpg"
        },
        {
          "nombre": "JPG Deployando con Docker",
          "archivo": "EJDockerMicroserviciosIntroduccionDeployando.jpg"
        },
        {
          "nombre": "PPT Deployando con Docker",
          "archivo": "EJDockerMicroserviciosIntroduccionDeployando.pdf"
        },
        {
          "nombre": "Codigo y Link",
          "archivo": "EJDockerMicroserviciosDeployando.txt"
        },
        {
          "nombre": "Conclusión",
          "archivo": "EJDockerMicroserviciosConclucionesDeployando.jpg"
        },
        {
          "nombre": "Video",
          "archivo": "dockerMicroserviciosDeploy.html"
        }
      ]
    },
    {
      "id": 110,
      "name": "Proyector Integrador Eureka",
      "detalle": "Integración de Eureka, Gateway, Circuit Breaker, Fein, RabbitMQ, Central de configuracion etc.",
      "link": [
        {
          "nombre": "Proyecto",
          "archivo": "HMicroserviciosAdmin.html"
        }
      ]
    }
  ]
}